#第一: 复习部分!

安装
    pip install django==1.11.*
    pip uninstall 包名

创建项目
    djnago-admin startproject web #(项目名)

启动
这是 用你的ip来启动 当然你可以不指定
    python manage.py runserver  10.11.219.77:8080

创建应用
    python manage.py startapp myhome(应用名)






1.路由
    跟路由下 创建一个路由指向子路由
    url(r'^' ,include('myhome.urls'))
    设置子路由(**注意不要在^$后加上/ 会提示找不到page**)
     在应用目录下创建一个urls.py的文件 导入views
     url(r'^$' ,views.index,name='myhome_index')

    创建视图函数
    def index(request):
        return HttpResponse('')  #返回字符串

2.返回模板
    1.配置模板
        设置settings.py 拼接路径
        在manage.py统计目录下创建 templates

    2.在template下创建html文件

    def index(request):
        data={}
        return render(request,'home/index.html',{'info':data})

路由参数(3种方式) 位置参数 关键字参数 默认值参数
**这个不需要再演示了,其他的不写就演示**

    位置参数 讲路由规则中使用()括起来的内容 当成参数传个视图函数 必须有形参接受
    url(r'^abc/()/$',views.abc)

    关键字参数(小括号内部不一样 [] 写正则的规则)
    (?P<变量名>[])

    默认值参数(需要多定义一个路由)
    def abc(request,p='1'):
    url(r'^abc/$',views.abc)
    url(r'^abc/(?P<p>[0-9]{2})/$',views.abc,name='abc')

反向解析
    模板中使用{% url '路由的名字' 参数 %} 
        {% url 'abc'  %} 
    在视图函数中使用
    reverse('路由名')


    参数例子讲解: 

    ```
    href="{% url 'table_delete' 3 2 1 %}" #url中有三个参数(\w+)/(\w+)/(\d+)，所以要传入三个具体的参数值3 2 1

    生成的url如下：
    http://0.0.0.0:8081/3/2/1/delete/
    ```

复习结束.


----------------------------------

#第二:新课讲解




前言: 今天主要讲解的是模型的操作,那模型主要讲什么?
就是CURD 增删改查的操作.

django 不会直接操作我们的数据库,我们都是通过模型来进行处理的.




# 模型是啥 怎么增删改查
打开课件.模型(快速的过一下)


## 前言准备工作,如果已经做了 那你跳过
新建一个项目

django-admin startproject web

cd web

workon django
python manage.py startapp myhonme
ls

mkdir templates

cd templates

修改 setting.py  把模板写好
'DIRS': [os.path.join(BASE_DIR,'template')],


写一个路由,配置访问到index 展示一个简单的页面
templates下随便写个模板
! tab 补全即可

配置web/urls.py 的 include
![title](https://leanote.com/api/file/getImage?fileId=5c32161aab644141820057b2)
编写 myhome 下的 urls.py
![title](https://leanote.com/api/file/getImage?fileId=5c321656ab644141820057bf)
编写 view.py
def index
![title](https://leanote.com/api/file/getImage?fileId=5c32168eab644141820057c9)


接下来进行数据库的配置,请跟下面走






#配置model
model的配置(**跟着文档中的 模型第一个**走 里面有安装配置知道创建user模型)
    1.安装数据
    2.创建数据库
    3.安装pymysql
    pip install pymysql
    4.修改配置文件
       DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.mysql',
                'NAME': 'stu',  # 数据库的名字
                'USER': 'root', # 链接数据库的账户
                'PASSWORD': '123456',  # 数据哭的密码
                'HOST': '127.0.0.1',   # 数据库的地址
                'PORT': '3306',        # 数据库的端口号
            }
        }
        把当前的应用导入
        INSTALLED_APPS = [
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'myhome',

        ]
    5.导入pymysql
        在settings.py同级目录下的__init__.py导入pymysql
        import pymysql
        pymysql.install_as_MySQLdb()

#模型定义(打开文档进行查看! 看课件的模型 跟着走)
    1.定义模型 myhome 下的models.py
        在不指定标名的情况下 自动生成的表明 应用名_类名  小写字母 
        一个类就是一个标 类里面的属性就是字段名
        如果不制定主键 会自动创建一个主键
        class User(Models.model):

    2.生成迁移文件 在manage.py目录下    
**如果没有stu数据库,你就创建一个schema 数据库。**
**可以使用mysqlblench 新建一个stu**

        python manage.py --help  # 查看命令
        python manage.py makemigrations
    3.执行迁移 在manage.py目录下  
        python manage.py migrate

[执行成功后,我们可以在mysql控制台进行查看的]
生成了 11张表  10张自带  1张你自己的表




#使用django实现数据的增删改查(**直接怼!!!!代码!!!**)
    首页
        127.0.0.1:8000
        添加数据
        查看所有信息
    1.添加数据
        返回一个form表单
        接收数据并入库
    2.查询数据
        表格
        删除/修改
    3.删除
        接受id删除对应的数据
    4.修改
        接受用户的数据 返回一个携带数据的表单
        提交数据并更新入库


打开你的代码进行敲写!



#最后讲解,一下dataAdd 的所有操作演示
主要是 简单加一个
删除数据的时候
使用**all filter get 字段查询 比较运算符 **得到结果然后 再去删除和更新的操作







