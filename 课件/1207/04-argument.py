'''
	参数
	1. 定义
	2. 参数传递
	3. 参数类型
	4. 匿名函数
'''

# 1. 定义
# 	参数: 能用将函数功能进行微弱的变化, 从而达到通用的效果
# 	
# 	形参: 在定义函数时给的参数  (parameter)
# 	实参: 在调用函数时给的参数  (argument)
# 	
# 	

def add(a, b):
	print('a + b = %d ' % (a+b)  )

add(10, 20)
add(5, 999)
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')


# 2. 参数传递
# 	2.1 传值 和 传址
# 		传值: 仅仅是将值 传递过去
# 		传址: 不仅将值 传递过去, 而且将内存地址传递过去
# 	
# 	2.2 区分:
# 			传值: 不可变数据类型 (Number, string, tuple, set)
# 			传址: 可变数据类型 (list, dict)

def test(a, b):
	a += 200 		# 传值
	b[0] *= 10 		# 传址
	print('a 的值: ', a)
	print('b 的值: ', b)


x = 10
y = [5,6,7]
test(x, y)
print('x 的值: ', x)
print('y 的值: ', y)
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')




# 3. 参数类型
# 	3.1 必须参数
# 	3.2 关键字参数
# 	3.3 默认参数
# 	3.4 不定长参数

# 3.1 必须参数
#  	实参个数 = 形参个数 (参数个数必须一致)
#  	先到先得

def test(name, age, sex):
	print('名字: %s' % name)
	print('年龄: %s' % age)
	print('性别: %s' % sex)

test('史珍香', 18, '男')
# test(18, '史珍香', '男')
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')


# 3.2 关键字参数
# 	实参指定 参数名来传入
# 
# 	好处: 不用按照顺序来传入
def test(name, age, sex):
	print('名字: %s' % name)
	print('年龄: %s' % age)
	print('性别: %s' % sex)

test(age=20, sex='人妖', name='杜子腾')
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')



# 3.3 默认参数
#  	即便实参没有传值, 形参可以采用默认值
def test(name, age = 18, sex = '人妖'):
	print('名字: %s' % name)
	print('年龄: %s' % age)
	print('性别: %s' % sex)

test('二狗', 800)
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')


# 3.4 不定长参数
# 	在形参前面加 * , 以元组形式接收没人要的实参
# 	在形参前面加 **, 以字典形式接收没人要的关键字实参
# 	单独出现     * , 在*后面的参数必须以关键字实参进行传入
# 				    且关键字 必须与 形参名 一致

def test(*a):
	print(a, type(a))

def test(x, y, *a):
	print(x, type(x))
	print(y, type(y))
	print(a, type(a))

def test(x, **a):
	print(x,a, type(a))

test(10,n1=20, n2=30, n3=40)
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')


def test(x, *, y, z):
		print(x)
		print(y)
		print(z)

# test(10,n1=20,n2=30)
test(10,z=30,y=20)
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')



# 4. 匿名函数
# 	没有名字的函数
# 	场景: 功能太简单, 又不想写def, 不用去函数名
# 
# 	lambda 形参 : 返回值
# 	
# 	冒号左边: 想要传递的参数
# 	冒号右边: 需要return的结果
#  	注意: lambda是一个表达式, 并非语句, 用在def不能用的地方
#  	
#  	小结:
#  		lambda 用于简单功能
#  		def    用于复杂功能


# 匿名写法
test = lambda x,y: x+y
print( test(10,20) )


# 原生写法
def xxx(x, y):
	sum = x + y
	return sum









