'''
	变量的作用域
	1. 全局/局部变量
	2. 作用域
	3. 改变作用域
'''


# 1. 全局变量
# 	在函数外部定义的变量
# 
#    局部变量
#   在函数内部定义的变量


a = 10 		# 全局变量
def test():
	b = 20  # 局部变量

print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')


# 2. 作用域
# 	2.1 局部作用域 			local 		L 
# 	2.2 闭包函数外的函数中 	enclosing 	E
# 	2.3 全局作用域  			global 		G
# 	2.4 内置作用域 			built-in 	B 
# 	
# 	查询规则:
# 		L -> E -> G -> B
# 		仅仅是访问, 不代表修改或删除


x = int(10.5) 		# 内置作用域 B	

a = 0 				# 全局作用域 G 
def outer():
	b = 1 			# 闭包函数外的函数内 E
	print('b的变量: %d ' % b)

	def inner():
		c = b 		# 局部作用域 L
		c = a
		print('c的变量: %d' % c) 	# L 区间能找到E区间的变量
									# L 区间能找到G区间的变量	

	inner()
	# print('c的变量: %d' % c) 	# E 区间找不到L区间的变量


outer()
print('a的变量: %d' % a)
# print('b的变量: %d' % b) 	# G 区间不能找到 E区间的变量
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')





# 3. 改变作用域
# 	在作用域E中, 不能直接改变全局变量, 通过global声明一下, 就可以改变全局变量
# 	
# 	注意点:
# 		global a 之后, 全局a 和 global a 公用一个内存
# 		而在E 区间中, 单独写 a = 15, 仅仅是给E区间中声明一个新的变量a, 该变量a 与 全局a 内存不一样
# 		
# 		如果仅仅是访问全局a , 不需要global声明
# 

a = 10 		# G 区间
def outer(): 
	b = 5 	# E 区间
	global a
	a += b  # a = a+b

	# a = 15 	  # E.a
	print(a)

outer()
print(a)
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')


# L 区间可以访问E区间的变量, 不能直接改变E区间的变量, 通过 nonlocal来声明一下就可以改变E区间的变啦
a = 10
def outer():
	b = 55 			# E区间
	def inner():
		nonlocal b
		b += 5 		# L区间
		print(b)
	inner()
outer()

# 小结: 
# 	需要改变作用G 中的变量, 则通过global
# 	需要改变作用E 中的变量, 则通过nonlocal















