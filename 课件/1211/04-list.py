'''
	列表 list
	1. 定义
	2. 格式
	3. 基本操作
	4. 高级操作
	5. 遍历
	6. 嵌套列表
	7. 推导式
'''

# 7. 推导式
# 	7.1 基本推导式
# 	7.2 条件推导式
# 	7.3 多循环推导式
# 	7.4 多循环条件推导式


# 7.1 基本推导式
#  	格式:  [ 变量操作 for 变量 in 列表 ]
#  	

# 需求: 
# 	将列表中的每个值+5
a = [10,20,30,40]

# 原生写法
for i in range( len(a) ):
	a[i] += 5
print(a)

# 推导式
a = [10,20,30,40]
a = [ i+5 for i in a ] 
print(a)
# 分析:
# 	变量:  每次获取列表中 "一个值"
# 		   i
# 	
# 	变量操作: 对每一次得到的值 进行操作, 可以当做表达式
# 			  i+5
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')



# 7.2 条件推导式
# 	格式:  [ 变量操作 for 变量 in 列表 if 条件表达式 ]
# 	格式:  [ 变量操作(true环境) if 条件表达式 else 变量操作(false环境)  for 变量 in 列表 ]

# 需求:
# 	获取列表中的所有偶数
a = [10, 11, 12, 13]
a = [ i + 5 for i in a if i % 2 == 0]
print(a)
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')


# 需求:
# 	将列表中所有的偶数+5, 其他值不变
a = [10, 11, 12, 13]
a = [ i+5 if i%2 == 0 else i for i in a ]
print(a)

# 7.3 多循环推导式
# 	格式： [变量操作 for 变量1 in 列表1 for 变量2 in 列表2]

# 需求:
# 	给下列人物配以称号, 写出所有的可能
a = ['屌丝', '菜鸟']
b = ['狗蛋', '全蛋']
c = [ i+'===>'+j for i in a for j in b ]
print(c)

# 原生写法:
a = ['屌丝', '菜鸟']
b = ['狗蛋', '全蛋']
c = []
for i in a:
	for j in b:
		c.append(i+'===>'+j)
print(c)


# 7.4 多循环条件推导式
# 	格式： [变量操作 for 变量1 in 列表1 for 变量2 in 列表2 if 条件]
# 	格式： [变量操作(true环境) if 条件 else 变量操作(false环境) for 变量1 in 列表1 for 变量2 in 列表2]

# 需求: 
# 	获取索引相同的对应值
a = ['屌丝', '菜鸟']
b = ['狗蛋', '全蛋']
c = [ i+'==>'+j for i in a for j in b if a.index(i) == b.index(j)]
print(c)


# 需求: 
# 	获取索引相同的对应值, 索引不同的用 xx==>xx 代替
a = ['屌丝', '菜鸟']
b = ['狗蛋', '全蛋']
c = [ i+'==>'+j  if a.index(i) == b.index(j) else 'xx===>xx'   for i in a for j in b]
print(c)


# 面试题:
#  	将以下代码优化一下
a = []
for i in range(12):
	a.append(2**i)
print(a)

# 优化之后的代码
a = [2**i for i in range(12)]
print(a)
