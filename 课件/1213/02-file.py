'''
	文件操作
	1. 打开文件
	2. 读取文件
	3. 写入文件
	4. 追加文件
	5. 增强模式
	6. 二进制模式
	7. 关闭文件
'''


# -*- coding:utf-8 -*-


# 1. 打开文件
# 	open(文件路径, 打开模式)
# 	返回值: io对象

a = open('a1.txt', 'r')
print(a)

# 打开模式
# 	r 	只读, 指针指向开头
# 			  文件不存在, 则拨错
# 				
# 		
# 	w 	只写, 指针指向开头
# 			  文件不存在, 则自动创建
# 		
# 		
# 	a   追加, 指针指向末尾
# 			  文件不存在, 则自动创建
# 
#   +  	增强, 将具备读 和 写能力
#   
#   b   二进制
# 			  



# 2. 读取文件
# 	io对象.read( 位数 )
# 	
# 	文件读取, 都是通过指针来读取.
# 	指针一般情况下, 都是指向开头
a = open('a1.txt', 'r')
print(a.read(2)) # 从当前指针向后读取2位
print(a.read(2)) # 从当前指针向后读取2位
print(a.read(5)) # 从当前指针向后读取5位
print(a.read())  # 从当前指针向后读取 到 末尾
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')


# 3. 写入文件
#  	io对象.write(内容)
#  	
#  	注意: 	
#  		w 模式, 会将原有内容先全部删除, 再写入内容
#  		w 模式, 如果文件不存在, 则自动创建


# a = open('a2.txt', 'r') 	# 因为打开模式为r 只读, 所以不能写入内容
a = open('a2.txt', 'w') 	# 打开模式为w, 可以写入内容
a.write('hello')
# print(a.read()) 			# 不能读取
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')



# 4. 追加模式
#  	io对象.open(文件路径, a)
#  	
#  	注意:
#  		a 模式, 会在原有内容的最后面, 进行添加内容, 不会影响原来的内容
a = open('a2.txt', 'a')
a.write('Tmail')

a = open('a3.txt', 'a')
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')



# 5. 增强模式 
# 	在原有的模式上, 加强功能,  符号: +
# 	一般情况下, 带有+的模式, 同时具备读 和 写的功能
# 	例如:
# 		r+
# 		w+
# 		a+
# 	
a = open('a4.txt', 'r+')
a.write('123') 	# 因为是r+ 模式, 内容会从开头, 依次进行覆盖, 没有碰到的内容, 不受影响
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')

a = open('a4.txt', 'w+')
a.write('abcdef') 	# 此时全部写完后, 指针已经到了最后

a.seek(0) 			# seek(0)  将指针指向开头
print(a.read()) 
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')


# 6. 二进制模式
#  	通常读取,写入文件时, 通过以 string 的类型进行操作
#  	byte: 以 二进制进行存储,  以十六进制展示 (格式:  \x十六进制)
#  	
#  	如果以b模式打开, 那么在写入内容之前, 必须先转为二进制
#  	
#  	str ==> byte 	需要encode()
#  	byte ==> str    需要decode()
#  
#   为什么需要byte转换
#   	1) 正常人看不懂, 得到保护数据的作用
#   	2) 抓取的文件, 有的就是二进制
#   	3) 速度快

a = open('a5.txt', 'wb+')
a.write('老母鸡'.encode()) 	# 在写入之前, 将老母鸡  转为二进制再存入
a.seek(0) 					# 因
经指向末尾
print(a.read()) 			# 读取时, 默认以二进制方式读取

a.seek(0) 		
print(a.read().decode()) 	# 二进制正常情况下看不懂, 所以需要decode() 转为string 再输出
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')


# 7. 关闭文件
#  	io对象.close()
#  	
#  	所有文件一旦打开, 就会占据内存, 一天不关闭, 一天就占内存, 所以用的越久, 打开的越多, 内存就浪费的越多
#  	
#  	close方法 主要是释放内存
a = open('a5.txt', 'r')
a.close()



# 编码
# 	因为计算机是用 二进制计算. 所以计算机只能处理数字, 而且用二进制计算也是最快的
# 	
# 	对于汉字的底层都是二进制
# 	
# 	ASCII 	只有128
# 	Unicode 支持大多数的语言, 比如中文, 日文, 韩文  ...
# 			缺点: 无论哪种字符 都是占4个字节, 浪费内存
# 	UTF-8   同样支持大多数语言
# 			优点: 
# 				英文, 数字, 占1个字节
# 				汉字, 日文, 占3个字节 (实际根据 操作系统决定   windows 占2位 )
# 				
# 		
#   中国编码:
#  		gb2312  早期的中国编码
#   	GBK 	字母数字占1位, 汉字占2位
#  
#   查看当前编码
import sys
print(sys.getdefaultencoding())

