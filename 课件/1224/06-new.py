'''
	专属方法
		__new__
'''


# 回顾知识:
# 	任何类, 最终都会继承 object类
# 	使用父级类的方法: super().父级方法名()



# 1. __new__
# 	1.1 触发条件: 创建实例时, 自动触发
# 	1.2 功能: 创建一个对象

# 变量名 = 类名()



# 1.1 触发条件
# --------------------------------------------------

class test():
	def __new__():
		pass

# a = test() 		# 报错: 说new方法需要0个参数, 但是实际却送了1个参数给new
# 由此证明, new方法至少有一个形参


# 正确方法
class test():
	def __new__(cls, *arg, **kwargs): 
		print(cls)

	# 参数分析:
	# 	cls 	接收一个test类
	# 	*arg  	接收剩余的参数
	# 	**kwargs 接收剩余的关键字参数
	# 	
	# 	这里的 *arg 和 **kwargs 主要是配合 __init__ 来使用的
 
a = test() 	# 在实例化时, 第一个自动执行的方法是 new, 不是init

print(a) 	# 输出的是None,  没有得到对象
# --------------------------------------------------



# 创建对象
# --------------------------------------------------

# 特殊写法
class test(object):
	def __new__(cls, *arg, **kwargs):
		return super().__new__(cls) 	# 返回一个对象

a = test()
print(a)

# 平常写法
class test():
	pass
a = test()
print(a)


# 分析:
# 	在"平常写法"中, 原生写法应该是 class test(object)
# 	在python3中, 在定义类时, 默认自动将 object 填入类名( ) 的小括号中.
# 所以才有 任何类 都继承object类的说法
# 
# 	那么object里面有什么?
# 		object 自带一个 __new__方法.
# 		__new__ 用于创建一个对象
# 		
# 		在平常写法中, 只要不重写__new__方法,  那么在实例化时, 得到一个对象
# 	
# 	在"特殊写法"中, 重写__new__ 方法, 没有对象可以返回, 默认返回None











